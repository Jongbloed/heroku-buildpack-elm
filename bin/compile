#!/usr/bin/env bash

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

indent() {
  sed -u 's/^/       /'
}

restore_cache() {
  if [[ -e "$BUILD_DIR/elm-stuff" && -e "/app/.elm" ]]; then
    echo "- skipping cache restore, exists" | indent
  else
    if [ -e "$CACHE_DIR/elm-stuff" ]; then
		if [ -e "$CACHE_DIR/.elm" ]; then
		  
		  echo "==contents of $CACHE_DIR/.elm/0.19.0/: " | indent
		  ls -a "$CACHE_DIR/.elm/0.19.0/" | indent
		  echo "==contents of cache dir:" | indent
		  ls -a "$CACHE_DIR/" | indent
		  echo "==contents of build dir:" | indent
		  ls -a "$BUILD_DIR/" | indent
		  echo "- restoring elm-stuff" | indent
		  mv "$CACHE_DIR/elm-stuff" "$BUILD_DIR/elm-stuff"
		  echo "- moved elm-stuff back:" | indent
		  ls -a "$BUILD_DIR/elm-stuff/"
		  
		  echo "- restoring binary elm stuff in /app/.elm" | indent
		  echo '== ls -a /app/' | indent
		  ls -a "/app/" | indent
		  echo "== moving that shit" | indent
		  mv "$CACHE_DIR/.elm" "/app/.elm" | indent
		  echo '== ls -a /app' | indent
		  ls -a "/app" | indent
		  echo "ls -a /app/.elm/" | indent
		  ls -a "/app/.elm/" | indent
		  echo "==contents of /app/.elm/0.19.0/package/elm/browser/" | indent
		  ls -a "/app/.elm/0.19.0/package/elm/browser/" | indent
		else
		  echo "cached elm-stuff was found, but cached /app/.elm is missing. Did not restore" | indent
		fi
    else
      echo "- no cached elm-stuff detected" | indent
    fi
  fi
}



#install_binaries() {
  # cd "$BUILD_DIR" && elm install | indent
#}

make_app() {
  # node_modules should already be on the path
  #ELM_COMPILE=$(cat "$1/ELM_COMPILE")
  echo "-----> Compiling with $(cat "$BUILD_DIR/elm_compile.sh")"
  chmod +x "$BUILD_DIR/elm_compile.sh"
  cd "$BUILD_DIR" && ./elm_compile.sh
  #cd "$BUILD_DIR" && $ELM_COMPILE | indent
}

cache_build() {
# The binary data at /app/.elm/0.19.0/package/elm/browser/1.0.0/objs.dat is
# corrupt.
# Elm caches build artifacts in the following directories:
#    /app/.elm
#    elm-stuff/
# Maybe you recently installed a command line tool or editor plugin that messes
# with them? They definitely should not be doing that, but you never know! So
# maybe try deleting them? Everything will be rebuilt from scratch. This may help
# reveal the corrupting influence.
  cp -R "/app/.elm" "$CACHE_DIR"
  cp -R "$BUILD_DIR/elm-stuff" "$CACHE_DIR"
}

#${ELM_COMPILE} | indent

restore_cache
#install_binaries
make_app
cache_build #TODO figure out where elm-stuff goes
