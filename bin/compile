#!/usr/bin/env bash

BUILD_DIR=${1:-}
CACHE_DIR=${2:-}
ENV_DIR=${3:-}

export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    ls -a $env_dir
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir

indent() {
  sed -u 's/^/       /'
}


restore_cache() {
  if [ -e "$BUILD_DIR/elm-stuff" ]; then
    echo "- skipping cache restore, exists" | indent
  else
    if [ -e "$CACHE_DIR/elm-stuff" ]; then
      echo "- restoring cache" | indent
      mv "$CACHE_DIR/elm-stuff" "$BUILD_DIR"
    else
      echo "- no cache detected" | indent
    fi
  fi
}

#install_binaries() {
  # cd "$BUILD_DIR" && elm install | indent
#}

make_app() {
  # node_modules should already be on the path
  #ELM_COMPILE=$(cat "$1/ELM_COMPILE")
  echo "-----> Compiling with $ELM_COMPILE"
  cd "$BUILD_DIR" && $ELM_COMPILE | indent
}

cache_build() {
  ls -a 
  ls -a $BUILD_DIR
  cp -R "$BUILD_DIR/elm-stuff" "$CACHE_DIR"
  
}

#${ELM_COMPILE} | indent

#restore_cache
#install_binaries
make_app
#cache_build #TODO figure out where elm-stuff goes
